{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tam\\\\Desktop\\\\react_portfolio\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nReactDOM.render( /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 2\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); //\n// var express = require('express');\n// var router = express.Router();\n// var nodemailer = require('nodemailer');\n// var cors = require('cors');\n// const creds = require('../config');\n// var transport = {\n// \thost: process.env.REACT_APP_MAIL_HOST, // Don’t forget to replace with the SMTP host of your provider\n// \tport: process.env.REACT_APP_MAIL_PORT,\n// \tauth: {\n// \t\tuser: creds.USER,\n// \t\tpass: creds.PASS,\n// \t},\n// };\n// var transporter = nodemailer.createTransport(transport);\n// transporter.verify((error, success) => {\n// \tif (error) {\n// \t\tconsole.log(error);\n// \t} else {\n// \t\tconsole.log('Server is ready to take messages');\n// \t}\n// });\n// router.post('/send', (req, res, next) => {\n// \tvar name = req.body.name;\n// \tvar email = req.body.email;\n// \tvar subject = req.body.subject;\n// \tvar message = req.body.message;\n// \tvar content = `name: ${name} \\n email: ${email} \\n message: ${message} `;\n// \tvar mail = {\n// \t\tfrom: name,\n// \t\tto: process.env.REACT_APP_MY_EMAIL, // Change to email address that you want to receive messages on\n// \t\tsubject: subject,\n// \t\ttext: content,\n// \t};\n// \tconsole.log(process.env.MAIL_USER);\n// \ttransporter.sendMail(mail, (err, data) => {\n// \t\tif (err) {\n// \t\t\tres.json({\n// \t\t\t\tstatus: 'fail',\n// \t\t\t});\n// \t\t} else {\n// \t\t\tres.json({\n// \t\t\t\tstatus: 'success',\n// \t\t\t});\n// \t\t}\n// \t});\n// });\n// const app = express();\n// app.use(cors());\n// app.use(express.json());\n// app.use('/', router);\n// app.listen(3002);","map":{"version":3,"sources":["C:/Users/tam/Desktop/react_portfolio/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","BrowserRouter","Router","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AAEAJ,QAAQ,CAACK,MAAT,eACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADD,EAICC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJD,E,CAOA;AACA;AACA;;AACAL,aAAa,CAACM,UAAd,G,CAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n//\n\n// var express = require('express');\n// var router = express.Router();\n// var nodemailer = require('nodemailer');\n// var cors = require('cors');\n// const creds = require('../config');\n\n// var transport = {\n// \thost: process.env.REACT_APP_MAIL_HOST, // Don’t forget to replace with the SMTP host of your provider\n// \tport: process.env.REACT_APP_MAIL_PORT,\n// \tauth: {\n// \t\tuser: creds.USER,\n// \t\tpass: creds.PASS,\n// \t},\n// };\n\n// var transporter = nodemailer.createTransport(transport);\n\n// transporter.verify((error, success) => {\n// \tif (error) {\n// \t\tconsole.log(error);\n// \t} else {\n// \t\tconsole.log('Server is ready to take messages');\n// \t}\n// });\n\n// router.post('/send', (req, res, next) => {\n// \tvar name = req.body.name;\n// \tvar email = req.body.email;\n// \tvar subject = req.body.subject;\n// \tvar message = req.body.message;\n// \tvar content = `name: ${name} \\n email: ${email} \\n message: ${message} `;\n// \tvar mail = {\n// \t\tfrom: name,\n// \t\tto: process.env.REACT_APP_MY_EMAIL, // Change to email address that you want to receive messages on\n// \t\tsubject: subject,\n// \t\ttext: content,\n// \t};\n// \tconsole.log(process.env.MAIL_USER);\n// \ttransporter.sendMail(mail, (err, data) => {\n// \t\tif (err) {\n// \t\t\tres.json({\n// \t\t\t\tstatus: 'fail',\n// \t\t\t});\n// \t\t} else {\n// \t\t\tres.json({\n// \t\t\t\tstatus: 'success',\n// \t\t\t});\n// \t\t}\n// \t});\n// });\n\n// const app = express();\n// app.use(cors());\n// app.use(express.json());\n// app.use('/', router);\n// app.listen(3002);\n"]},"metadata":{},"sourceType":"module"}