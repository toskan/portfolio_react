{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tam\\\\Desktop\\\\portfolio\\\\my-app\\\\src\\\\Modal.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // import PropTypes from 'prop-types';\n// import FocusTrap from 'focus-trap-react';\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst modalMount = document.getElementById('modalMount');\n\nconst Modal = props => {\n  const {\n    slidesState,\n    isModalOpen,\n    setIsModalOpen\n  } = props;\n\n  const toggleModalOpen = () => setIsModalOpen(prev => !prev);\n\n  return ReactDOM.createPortal( /*#__PURE__*/React.createElement(\"div\", {\n    id: \"modal-slides\",\n    className: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  }, props.children), modalMount);\n};\n\nexport default Modal;","map":{"version":3,"sources":["C:/Users/tam/Desktop/portfolio/my-app/src/Modal.js"],"names":["React","ReactDOM","modalMount","document","getElementById","Modal","props","slidesState","isModalOpen","setIsModalOpen","toggleModalOpen","prev","createPortal","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAnB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACxB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA;AAA5B,MAA+CH,KAArD;;AAEA,QAAMI,eAAe,GAAG,MAAMD,cAAc,CAAEE,IAAD,IAAU,CAACA,IAAZ,CAA5C;;AACA,SAAOV,QAAQ,CAACW,YAAT,eACN;AAAK,IAAA,EAAE,EAAC,cAAR;AAAuB,IAAA,SAAS,EAAC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEN,KAAK,CAACO,QADR,CADM,EAINX,UAJM,CAAP;AAMA,CAVD;;AAYA,eAAeG,KAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import PropTypes from 'prop-types';\r\n// import FocusTrap from 'focus-trap-react';\r\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst modalMount = document.getElementById('modalMount');\r\n\r\nconst Modal = (props) => {\r\n\tconst { slidesState, isModalOpen, setIsModalOpen } = props;\r\n\r\n\tconst toggleModalOpen = () => setIsModalOpen((prev) => !prev);\r\n\treturn ReactDOM.createPortal(\r\n\t\t<div id=\"modal-slides\" className=\"modal\">\r\n\t\t\t{props.children}\r\n\t\t</div>,\r\n\t\tmodalMount\r\n\t);\r\n};\r\n\r\nexport default Modal;\r\n"]},"metadata":{},"sourceType":"module"}