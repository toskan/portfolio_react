{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tam\\\\Desktop\\\\react_portfolio\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nReactDOM.render( /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 2\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); //\n\nvar express = require('express');\n\nvar router = express.Router();\n\nvar nodemailer = require('nodemailer');\n\nvar cors = require('cors');\n\nconst creds = require('../config');\n\nvar transport = {\n  host: process.env.REACT_APP_MAIL_HOST,\n  // Don’t forget to replace with the SMTP host of your provider\n  port: process.env.REACT_APP_MAIL_PORT,\n  auth: {\n    user: creds.USER,\n    pass: creds.PASS\n  }\n};\nvar transporter = nodemailer.createTransport(transport);\ntransporter.verify((error, success) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Server is ready to take messages');\n  }\n});\nrouter.post('/send', (req, res, next) => {\n  var name = req.body.name;\n  var email = req.body.email;\n  var subject = req.body.subject;\n  var message = req.body.message;\n  var content = `name: ${name} \\n email: ${email} \\n message: ${message} `;\n  var mail = {\n    from: name,\n    to: process.env.REACT_APP_MY_EMAIL,\n    // Change to email address that you want to receive messages on\n    subject: subject,\n    text: content\n  };\n  console.log(process.env.MAIL_USER);\n  transporter.sendMail(mail, (err, data) => {\n    if (err) {\n      res.json({\n        status: 'fail'\n      });\n    } else {\n      res.json({\n        status: 'success'\n      });\n    }\n  });\n});\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use('/', router);\napp.listen(3002);","map":{"version":3,"sources":["C:/Users/tam/Desktop/react_portfolio/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","BrowserRouter","Router","render","document","getElementById","unregister","express","require","router","nodemailer","cors","creds","transport","host","process","env","REACT_APP_MAIL_HOST","port","REACT_APP_MAIL_PORT","auth","user","USER","pass","PASS","transporter","createTransport","verify","error","success","console","log","post","req","res","next","name","body","email","subject","message","content","mail","from","to","REACT_APP_MY_EMAIL","text","MAIL_USER","sendMail","err","data","json","status","app","use","listen"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n//\n\nvar express = require('express');\nvar router = express.Router();\nvar nodemailer = require('nodemailer');\nvar cors = require('cors');\nconst creds = require('../config');\n\nvar transport = {\n\thost: process.env.REACT_APP_MAIL_HOST, // Don’t forget to replace with the SMTP host of your provider\n\tport: process.env.REACT_APP_MAIL_PORT,\n\tauth: {\n\t\tuser: creds.USER,\n\t\tpass: creds.PASS,\n\t},\n};\n\nvar transporter = nodemailer.createTransport(transport);\n\ntransporter.verify((error, success) => {\n\tif (error) {\n\t\tconsole.log(error);\n\t} else {\n\t\tconsole.log('Server is ready to take messages');\n\t}\n});\n\nrouter.post('/send', (req, res, next) => {\n\tvar name = req.body.name;\n\tvar email = req.body.email;\n\tvar subject = req.body.subject;\n\tvar message = req.body.message;\n\tvar content = `name: ${name} \\n email: ${email} \\n message: ${message} `;\n\tvar mail = {\n\t\tfrom: name,\n\t\tto: process.env.REACT_APP_MY_EMAIL, // Change to email address that you want to receive messages on\n\t\tsubject: subject,\n\t\ttext: content,\n\t};\n\tconsole.log(process.env.MAIL_USER);\n\ttransporter.sendMail(mail, (err, data) => {\n\t\tif (err) {\n\t\t\tres.json({\n\t\t\t\tstatus: 'fail',\n\t\t\t});\n\t\t} else {\n\t\t\tres.json({\n\t\t\t\tstatus: 'success',\n\t\t\t});\n\t\t}\n\t});\n});\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use('/', router);\napp.listen(3002);\n"]},"metadata":{},"sourceType":"module"}