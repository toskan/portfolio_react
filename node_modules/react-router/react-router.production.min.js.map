{"version":3,"file":"react-router.production.min.js","sources":["../../packages/react-router/index.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createMemoryHistory, parsePath } from 'history';\n\nconst readOnly = __DEV__ ? obj => Object.freeze(obj) : obj => obj;\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\nconst LocationContext = React.createContext(null);\n\nif (__DEV__) {\n  LocationContext.displayName = 'Location';\n}\n\nconst RouteContext = React.createContext({\n  outlet: null,\n  params: readOnly({}),\n  pathname: '',\n  route: null\n});\n\nif (__DEV__) {\n  RouteContext.displayName = 'Route';\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n */\nexport function MemoryRouter({\n  children,\n  initialEntries,\n  initialIndex,\n  timeout\n}) {\n  let historyRef = React.useRef(null);\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  return (\n    <Router\n      children={children}\n      history={historyRef.current}\n      timeout={timeout}\n    />\n  );\n}\n\nif (__DEV__) {\n  MemoryRouter.displayName = 'MemoryRouter';\n  MemoryRouter.propTypes = {\n    children: PropTypes.node,\n    timeout: PropTypes.number,\n    initialEntries: PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n          pathname: PropTypes.string,\n          search: PropTypes.string,\n          hash: PropTypes.string,\n          state: PropTypes.object,\n          key: PropTypes.string\n        })\n      ])\n    ),\n    initialIndex: PropTypes.number\n  };\n}\n\n/**\n * Navigate programmatically using a component.\n */\nexport function Navigate({ to, replace, state }) {\n  let navigate = useNavigate();\n\n  let locationContext = React.useContext(LocationContext);\n  invariant(\n    locationContext != null,\n    // TODO: This error is probably because they somehow have\n    // 2 versions of the router loaded. We can help them understand\n    // how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !locationContext.history.static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nif (__DEV__) {\n  Navigate.displayName = 'Navigate';\n  Navigate.propTypes = {\n    to: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        pathname: PropTypes.string,\n        search: PropTypes.string,\n        hash: PropTypes.string\n      })\n    ]).isRequired,\n    replace: PropTypes.bool,\n    state: PropTypes.object\n  };\n}\n\n/**\n * Renders the child route's element, if there is one.\n */\nexport function Outlet() {\n  return useOutlet();\n}\n\nif (__DEV__) {\n  Outlet.displayName = 'Outlet';\n  Outlet.propTypes = {};\n}\n\n/**\n * Used in a route config to render an element.\n */\nexport function Route({ element = <Outlet /> }) {\n  return element;\n}\n\nif (__DEV__) {\n  Route.displayName = 'Route';\n  Route.propTypes = {\n    children: PropTypes.node,\n    element: PropTypes.element,\n    path: PropTypes.string\n  };\n}\n\n// TODO: Remove once React.useTransition is stable.\nconst startTransition = tx => tx();\nconst useTransition = React.useTransition || (() => [startTransition, false]);\n\n/**\n * The root context provider. There should be only one of these in a given app.\n */\nexport function Router({ children = null, history, timeout = 2000 }) {\n  let [location, setLocation] = React.useState(history.location);\n  let [startTransition, pending] = useTransition({ timeoutMs: timeout });\n  let shouldListenRef = React.useRef(true);\n\n  invariant(\n    !React.useContext(LocationContext),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You never need more than one.`\n  );\n\n  if (shouldListenRef.current) {\n    shouldListenRef.current = false;\n    history.listen(({ location }) => {\n      startTransition(() => {\n        setLocation(location);\n      });\n    });\n  }\n\n  return (\n    <LocationContext.Provider\n      children={children}\n      value={{ history, location, pending }}\n    />\n  );\n}\n\nif (__DEV__) {\n  Router.displayName = 'Router';\n  Router.propTypes = {\n    children: PropTypes.node,\n    history: PropTypes.shape({\n      action: PropTypes.string,\n      location: PropTypes.object,\n      push: PropTypes.func,\n      replace: PropTypes.func,\n      go: PropTypes.func,\n      listen: PropTypes.func,\n      block: PropTypes.func\n    }),\n    timeout: PropTypes.number\n  };\n}\n\n/**\n * A wrapper for useRoutes that treats its children as route and/or redirect\n * objects.\n */\nexport function Routes({ basename = '', caseSensitive = false, children }) {\n  let routes = createRoutesFromChildren(children);\n  return useRoutes(routes, basename, caseSensitive);\n}\n\nif (__DEV__) {\n  Routes.displayName = 'Routes';\n  Routes.propTypes = {\n    basename: PropTypes.string,\n    caseSensitive: PropTypes.bool,\n    children: PropTypes.node\n  };\n}\n\n/**\n * Utility function that creates a routes config object from a React\n * \"children\" object, which is usually either a React element or an\n * array of elements.\n */\nexport function createRoutesFromChildren(children) {\n  let routes = [];\n\n  React.Children.forEach(children, element => {\n    // Ignore non-elements. This allows people to more\n    // easily inline conditionals in their route config.\n    if (!React.isValidElement(element)) return;\n\n    let { children, path = '/' } = element.props;\n\n    // Transparently support React.Fragment and its children.\n    if (element.type === React.Fragment) {\n      routes.push.apply(routes, createRoutesFromChildren(children));\n      return;\n    }\n\n    let route = { path, element };\n    let childRoutes = createRoutesFromChildren(children);\n    if (childRoutes.length) {\n      route.children = childRoutes;\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Blocks all navigation attempts. This is useful for preventing the page from\n * changing until some condition is met, like saving form data.\n */\nexport function useBlocker(blocker, when = true) {\n  let locationContext = React.useContext(LocationContext);\n  invariant(\n    locationContext != null,\n    // TODO: This error is probably because they somehow have\n    // 2 versions of the router loaded. We can help them understand\n    // how to avoid that.\n    `useBlocker() may be used only in the context of a <Router> component.`\n  );\n  let { history } = locationContext;\n\n  React.useEffect(() => {\n    if (when) {\n      let unblock = history.block(tx => {\n        let autoUnblockingTx = {\n          ...tx,\n          retry() {\n            // Automatically unblock the transition so it can\n            // play all the way through before retrying it.\n            // TODO: Figure out how to re-enable this block if the\n            // transition is cancelled for some reason.\n            unblock();\n            tx.retry();\n          }\n        };\n\n        blocker(autoUnblockingTx);\n      });\n\n      return unblock;\n    }\n  }, [history, when, blocker]);\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n */\nexport function useHref(to) {\n  let resolvedLocation = useResolvedLocation(to);\n\n  let locationContext = React.useContext(LocationContext);\n  invariant(\n    locationContext != null,\n    // TODO: This error is probably because they somehow have\n    // 2 versions of the router loaded. We can help them understand\n    // how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  return locationContext.history.createHref(resolvedLocation);\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * NOTE: If you're using this it may mean you're doing some of your own \"routing\"\n * in your app, and we'd like to know what your use case is. We may be able to\n * provide something higher-level to better suit your needs.\n */\nexport function useLocation() {\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n */\nexport function useMatch(to) {\n  let location = useLocation();\n  let resolvedLocation = useResolvedLocation(to);\n  // TODO: Try to match search + hash as well\n  return location.pathname === resolvedLocation.pathname;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n */\nexport function useNavigate() {\n  let { pathname } = React.useContext(RouteContext);\n\n  let locationContext = React.useContext(LocationContext);\n  invariant(\n    locationContext != null,\n    // TODO: This error is probably because they somehow have\n    // 2 versions of the router loaded. We can help them understand\n    // how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n  let { history, pending } = locationContext;\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate = React.useCallback(\n    (to, { replace, state } = {}) => {\n      if (activeRef.current) {\n        if (typeof to === 'number') {\n          history.go(to);\n        } else {\n          let relativeTo = resolveLocation(to, pathname);\n          // If we are pending transition, use REPLACE instead of PUSH.\n          // This will prevent URLs that we started navigating to but\n          // never fully loaded from appearing in the history stack.\n          let method = !!replace || pending ? 'replace' : 'push';\n          history[method](relativeTo, state);\n        }\n      } else {\n        warning(\n          false,\n          `You should call navigate() in a useEffect, not when ` +\n            `your component is first rendered.`\n        );\n      }\n    },\n    [history, pathname, pending]\n  );\n\n  return navigate;\n}\n\n/**\n * Returns the outlet element at this level of the route hierarchy. Used to\n * render child routes.\n */\nexport function useOutlet() {\n  return React.useContext(RouteContext).outlet;\n}\n\n/**\n * Returns a hash of the dynamic params that were matched in the route path.\n * This is useful for using ids embedded in the URL to fetch data, but we\n * eventually want to provide something at a higher level for this.\n */\nexport function useParams() {\n  return React.useContext(RouteContext).params;\n}\n\n/**\n * Returns a fully-resolved location object relative to the current location.\n */\nexport function useResolvedLocation(to) {\n  let { pathname } = React.useContext(RouteContext);\n  return React.useMemo(() => resolveLocation(to, pathname), [to, pathname]);\n}\n\nlet missingTrailingSplatWarnings, warnAboutMissingTrailingSplatAt;\nif (__DEV__) {\n  missingTrailingSplatWarnings = {};\n  warnAboutMissingTrailingSplatAt = (pathname, cond, message) => {\n    if (!cond && !missingTrailingSplatWarnings[pathname]) {\n      missingTrailingSplatWarnings[pathname] = true;\n      warning(false, message);\n    }\n  };\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * Route objects may take one of 2 forms:\n *\n * - { path, element, children }\n * - { path, redirectTo }\n *\n * We should probably write this up in TypeScript instead of in a comment. In\n * fact, what am I even doing here. Nobody is ever going to read this.\n */\nexport function useRoutes(routes, basename = '', caseSensitive = false) {\n  let {\n    params: parentParams,\n    pathname: parentPathname,\n    route: parentRoute\n  } = React.useContext(RouteContext);\n\n  if (warnAboutMissingTrailingSplatAt) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since\n    // we cannot even give the warning unless they land at the parent route.\n    let parentPath = parentRoute && parentRoute.path;\n    warnAboutMissingTrailingSplatAt(\n      parentPathname,\n      !parentRoute || parentRoute.path.endsWith('*'),\n      `You rendered descendant <Routes> (or called \\`useRoutes\\`) at \"${parentPathname}\"` +\n        ` (under <Route path=\"${parentPath}\">) but the parent route path has no trailing \"*\".` +\n        ` This means if you navigate deeper, the parent won't match anymore and therefore` +\n        ` the child routes will never render.` +\n        `\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route path=\"${parentPath}/*\">.`\n    );\n  }\n\n  basename = basename ? joinPaths([parentPathname, basename]) : parentPathname;\n\n  let location = useLocation();\n  let matches = React.useMemo(\n    () => matchRoutes(routes, location, basename, caseSensitive),\n    [routes, location, basename, caseSensitive]\n  );\n\n  if (!matches) {\n    // TODO: Warn about nothing matching, suggest using a catch-all route.\n    return null;\n  }\n\n  // TODO: Initiate preload sequence here.\n\n  // Otherwise render an element.\n  let element = matches.reduceRight((outlet, { params, pathname, route }) => {\n    return (\n      <RouteContext.Provider\n        children={route.element}\n        value={{\n          outlet,\n          params: readOnly({ ...parentParams, ...params }),\n          pathname: joinPaths([basename, pathname]),\n          route\n        }}\n      />\n    );\n  }, null);\n\n  return element;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Matches the given routes to a location and returns the match data.\n */\nexport function matchRoutes(\n  routes,\n  location,\n  basename = '',\n  caseSensitive = false\n) {\n  if (typeof location === 'string') {\n    location = parsePath(location);\n  }\n\n  // TODO: Validate location\n  // - it should have a pathname\n  let base = basename.replace(/^\\/+|\\/+$/g, '');\n  let target = location.pathname.slice(1);\n\n  if (base) {\n    if (base === target) {\n      target = '';\n    } else if (target.startsWith(base)) {\n      target = target.slice(base.length).replace(/^\\/+/, '');\n    } else {\n      return null;\n    }\n  }\n\n  let flattenedRoutes = flattenRoutes(routes);\n\n  // TODO: Validate the routes config\n  // - routes should all have paths and elements\n  // - redirects should have a redirectTo\n  // - redirects should not have children\n  // - warn about unreachable routes\n\n  rankFlattenedRoutes(flattenedRoutes);\n\n  for (let i = 0; i < flattenedRoutes.length; ++i) {\n    let [path, flatRoutes] = flattenedRoutes[i];\n\n    // TODO: Match on search, state too\n    let [matcher] = compilePath(path, /* end */ true, caseSensitive);\n\n    if (matcher.test(target)) {\n      return flatRoutes.map((route, index) => {\n        let routes = flatRoutes.slice(0, index + 1);\n        let path = joinPaths(routes.map(r => r.path));\n        let [matcher, keys] = compilePath(path, /* end */ false, caseSensitive);\n        let match = target.match(matcher);\n        let pathname = '/' + match[1];\n        let values = match.slice(2);\n        let params = keys.reduce((memo, key, index) => {\n          memo[key] = safelyDecodeURIComponent(values[index], key);\n          return memo;\n        }, {});\n\n        return { params, pathname, route };\n      });\n    }\n  }\n\n  return null;\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value.replace(/\\+/g, ' '));\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (the error message was: ${error.message}).`\n    );\n\n    return value;\n  }\n}\n\nfunction flattenRoutes(\n  routes,\n  flattenedRoutes = [],\n  parentPath = '',\n  parentRoutes = [],\n  parentIndexes = []\n) {\n  routes.forEach((route, index) => {\n    let path = joinPaths([parentPath, route.path]);\n    let routes = parentRoutes.concat(route);\n    let indexes = parentIndexes.concat(index);\n\n    flattenedRoutes.push([path, routes, indexes]);\n\n    if (route.children) {\n      flattenRoutes(route.children, flattenedRoutes, path, routes, indexes);\n    }\n  });\n\n  return flattenedRoutes;\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === '*';\n\nfunction computeScore(path) {\n  let segments = path.split('/');\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  return segments\n    .filter(s => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === ''\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction rankFlattenedRoutes(flattenedRoutes) {\n  let pathScores = flattenedRoutes.reduce((memo, [path]) => {\n    memo[path] = computeScore(path);\n    return memo;\n  }, {});\n\n  flattenedRoutes.sort((a, b) => {\n    let [aPath, , aIndexes] = a;\n    let aScore = pathScores[aPath];\n\n    let [bPath, , bIndexes] = b;\n    let bScore = pathScores[bPath];\n\n    return aScore !== bScore\n      ? bScore - aScore // Higher score first\n      : compareIndexes(aIndexes, bIndexes);\n  });\n}\n\nfunction compareIndexes(a, b) {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? a[a.length - 1] - b[b.length - 1] // Earlier siblings come first\n    : 0; // It doesn't make sense to rank non-siblings by index, so they sort equal\n}\n\nfunction compilePath(path, end, caseSensitive) {\n  let keys = [];\n  let pattern =\n    '^(' +\n    path\n      .replace(/^\\/+/, '') // Ignore leading /\n      .replace(/\\*\\//g, '') // Ignore */ (from paths nested under a *)\n      .replace(/\\/?\\*?$/, '') // Ignore trailing /*, we'll handle it below\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, '\\\\$&') // Escape special regex chars\n      .replace(/:(\\w+)/g, (_, key) => {\n        keys.push(key);\n        return '([^\\\\/]+)';\n      }) +\n    ')';\n\n  if (path.endsWith('*')) {\n    if (path.endsWith('/*')) {\n      pattern += '\\\\/?'; // Don't include the / in params['*']\n    }\n    keys.push('*');\n    pattern += '(.*)';\n  } else if (end) {\n    pattern += '\\\\/?';\n  }\n\n  if (end) pattern += '$';\n\n  let flags = caseSensitive ? undefined : 'i';\n  let matcher = new RegExp(pattern, flags);\n\n  return [matcher, keys];\n}\n\nconst trimTrailingSlashes = path => path.replace(/\\/+$/, '');\nconst normalizeSlashes = path => path.replace(/\\/\\/+/g, '/');\nconst joinPaths = paths => normalizeSlashes(paths.join('/'));\nconst splitPath = path => normalizeSlashes(path).split('/');\n\nfunction resolvePathname(toPathname, fromPathname) {\n  let segments = splitPath(trimTrailingSlashes(fromPathname));\n  let relativeSegments = splitPath(toPathname);\n\n  relativeSegments.forEach(segment => {\n    if (segment === '..') {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== '.') {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? joinPaths(segments) : '/';\n}\n\n/**\n * Returns a fully resolve location object relative to the given pathname.\n */\nexport function resolveLocation(to, fromPathname = '/') {\n  let { pathname: toPathname, search = '', hash = '' } =\n    typeof to === 'string' ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith('/')\n      ? resolvePathname(toPathname, '/')\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return { pathname, search, hash };\n}\n\n/**\n * Creates a path with params interpolated.\n */\nexport function generatePath(pathname, params = {}) {\n  return pathname\n    .replace(/:(\\w+)/g, (_, key) => params[key] || `:${key}`)\n    .replace(/\\*$/, splat => params[splat] || splat);\n}\n"],"names":["parsePath","params","route","l","Router","children","history","timeout","location","setLocation","React","startTransition","pending","useTransition","timeoutMs","LocationContext","invariant","shouldListenRef","value","createRoutesFromChildren","routes","element","path","childRoutes","useLocation","useNavigate","pathname","RouteContext","locationContext","activeRef","to","replace","state","relativeTo","resolveLocation","useOutlet","useResolvedLocation","useRoutes","basename","caseSensitive","parentParams","parentPathname","paths","matches","matchRoutes","outlet","obj","target","base","rankFlattenedRoutes","flattenedRoutes","pathScores","memo","initialScore","segments","isSplat","s","score","segment","paramRe","computeScore","a","b","aPath","aIndexes","bPath","bIndexes","bScore","aScore","compareIndexes","n","i","flattenRoutes","parentPath","parentRoutes","parentIndexes","index","indexes","flatRoutes","matcher","compilePath","r","keys","values","match","key","decodeURIComponent","error","safelyDecodeURIComponent","end","pattern","_","RegExp","undefined","resolvePathname","toPathname","fromPathname","search","hash","e","navigate","splat","h","useBlocker","when","c","resolvedLocation"],"mappings":"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"}